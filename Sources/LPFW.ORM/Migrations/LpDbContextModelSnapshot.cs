// <auto-generated />
using System;
using LPFW.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LPFW.ORM.Migrations
{
    [DbContext(typeof(LpDbContext))]
    partial class LpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.AppPathAndMenu.ApplicationMenuGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PortalUrl")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ApplicationMenuGroups");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.AppPathAndMenu.ApplicationMenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationMenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("IconString")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ItemEndString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemStartTipString")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UrlString")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMenuGroupId");

                    b.HasIndex("ParentItemId");

                    b.ToTable("ApplicationMenuItems");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.Attachments.BusinessFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttachmentTimeUploaded")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("BinaryContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("IconString")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("RelevanceObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UploadFileSuffix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UploadPath")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("UploaderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BusinessFiles");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.Attachments.BusinessImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("IconString")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<bool>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForTitle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("RelevanceObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UploadFileSuffix")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UploadPath")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UploadedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UploaderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BusinessImages");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.Attachments.BusinessVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttachmentTimeUploaded")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("BinaryContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("IconString")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<bool>("IsInDB")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("RelevanceObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UploadFileSuffix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UploadPath")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("UploaderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BusinessVideos");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.BusinessCommon.CommonAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CountyName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DetailName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommonAddresses");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoCommon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DemoCommons");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("DemoCommonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DemoEntityEnum")
                        .HasColumnType("int");

                    b.Property<Guid?>("DemoEntityParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HtmlContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("DemoCommonId");

                    b.HasIndex("DemoEntityParentId");

                    b.ToTable("DemoEntities");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("DemoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("DemoEntityId");

                    b.ToTable("DemoEntityItems");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityParent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DemoEntityParents");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityWithDemoItemForMultiSelect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DemoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DemoItemForMultiSelectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DemoEntityId");

                    b.HasIndex("DemoItemForMultiSelectId");

                    b.ToTable("DemoEntityWithDemoItemForMultiSelects");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoItemForMultiSelect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DemoItemForMultiSelects");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.MusicEntity.MusicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MusicTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SingerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MusicTypeId");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.MusicEntity.MusicTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MusicTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MusicTypeId");

                    b.ToTable("MusicType");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.MusicUIEntity.MusicCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassName")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MusicCores");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("EmployeeAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentContacts");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Benchmark")
                        .HasColumnType("int");

                    b.Property<float>("Coefficient")
                        .HasColumnType("real");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KPITypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("KPITypeId");

                    b.ToTable("DepartmentKPIs");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPIMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MetricLifeCycle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPerformenceValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentKPIMetrics");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPIMetricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdjustmentValue")
                        .HasColumnType("int");

                    b.Property<int>("DefaultValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentKPIId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentKPIMetricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PerformanceValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentKPIId");

                    b.HasIndex("DepartmentKPIMetricId");

                    b.ToTable("DepartmentKPIMetricItems");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentLeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LeaderId");

                    b.ToTable("DepartmentLeaders");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(350)")
                        .HasMaxLength(350);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CredentialsCode")
                        .HasColumnType("nvarchar(26)")
                        .HasMaxLength(26);

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpiredDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(26)")
                        .HasMaxLength(26);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PersonalCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeKPIMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MetricLifeCycle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPerformenceValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeKPIMetrics");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeKPIMetricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdjustmentValue")
                        .HasColumnType("int");

                    b.Property<int>("DefaultValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeKPIMetricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PerformanceValue")
                        .HasColumnType("real");

                    b.Property<Guid?>("PositionWorkKPIId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeKPIMetricId");

                    b.HasIndex("PositionWorkKPIId");

                    b.ToTable("EmployeeKPIMetricItems");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeWithPositionWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionWorkId");

                    b.ToTable("EmployeeWithPositionWorks");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminUserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusinessEntityStatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganzationContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("TransactionCenterRegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationLeaderId");

                    b.HasIndex("OrganzationContactId");

                    b.HasIndex("TransactionCenterRegisterId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationBusinessProcesses");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcessActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("NextNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationBusinessProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PreviousNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PositionWorkId");

                    b.ToTable("OrganizationBusinessProcessActivities");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcessWithWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationBusinessProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationBusinessProcessId");

                    b.HasIndex("PositionWorkId");

                    b.ToTable("OrganizationBusinessProcessWithWorks");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationKPIType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OrganizationKPITypes");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkActionUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionWorks");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.PositionWorkKPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Benchmark")
                        .HasColumnType("int");

                    b.Property<float>("Coefficient")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KPITypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PositionWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("KPITypeId");

                    b.HasIndex("PositionId");

                    b.HasIndex("PositionWorkId");

                    b.ToTable("PositionWorkKPIs");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.TransactionCenterRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminUserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusinessEntityStatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("TransactionCenterRegisters");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArticleContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleSecondTitle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleSource")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ArticleStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsOriented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublishedByHtml")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RelevanceObjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int>("UpVoteNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CommentWritorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MasterArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CommentWritorId");

                    b.HasIndex("MasterArticleId");

                    b.HasIndex("ParentId");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleCommentTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RefrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ArticleCommentTags");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleCommentWithTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleCommentWithTags");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleInTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MasterArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleTopicId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleInTopics");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleInType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MasterArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("MasterArticleId");

                    b.ToTable("ArticleInTypes");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleRelevance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MasterArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelevanceArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MasterArticleId");

                    b.HasIndex("RelevanceArticleId");

                    b.ToTable("ArticleRelevances");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RefrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("TopicImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicImageId");

                    b.ToTable("ArticleTopics");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleTypeImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeImageId");

                    b.HasIndex("ParentTypeId");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleWithTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleWithTags");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CourseAdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseAdministratorId");

                    b.HasIndex("CourseContainerId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseContainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CourseContainer");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseItemContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseItemContentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.ToTable("CourseItems");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseItemContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FootContent")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("HeadContent")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SecondTitle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.ToTable("CourseItemContents");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseWithRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CourseWithRoles");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseWithUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CourseWithUsers");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.XDemo.MusicDemo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UndertakerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MDemo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasIndex("ParentRoleId");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>");

                    b.Property<DateTime>("Birthdays")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPseudoDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.AppPathAndMenu.ApplicationMenuItem", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.AppPathAndMenu.ApplicationMenuGroup", "ApplicationMenuGroup")
                        .WithMany()
                        .HasForeignKey("ApplicationMenuGroupId");

                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.AppPathAndMenu.ApplicationMenuItem", "ParentItem")
                        .WithMany()
                        .HasForeignKey("ParentItemId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntity", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.Demo.DemoCommon", "DemoCommon")
                        .WithMany()
                        .HasForeignKey("DemoCommonId");

                    b.HasOne("LPFW.EntitiyModels.Demo.DemoEntityParent", "DemoEntityParent")
                        .WithMany()
                        .HasForeignKey("DemoEntityParentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityItem", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.Demo.DemoEntity", "DemoEntity")
                        .WithMany()
                        .HasForeignKey("DemoEntityId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityParent", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.Demo.DemoEntityParent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.Demo.DemoEntityWithDemoItemForMultiSelect", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.Demo.DemoEntity", "DemoEntity")
                        .WithMany()
                        .HasForeignKey("DemoEntityId");

                    b.HasOne("LPFW.EntitiyModels.Demo.DemoItemForMultiSelect", "DemoItemForMultiSelect")
                        .WithMany()
                        .HasForeignKey("DemoItemForMultiSelectId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.MusicEntity.MusicEntity", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.MusicEntity.MusicTypeEntity", "MusicType")
                        .WithMany()
                        .HasForeignKey("MusicTypeId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.MusicEntity.MusicTypeEntity", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.MusicEntity.MusicTypeEntity", "MusicType")
                        .WithMany()
                        .HasForeignKey("MusicTypeId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Department", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.BusinessCommon.CommonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentContact", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPI", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", null)
                        .WithMany("DepartmentKPICollection")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.OrganizationKPIType", "KPIType")
                        .WithMany()
                        .HasForeignKey("KPITypeId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPIMetric", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPIMetricItem", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPI", "DepartmentKPI")
                        .WithMany()
                        .HasForeignKey("DepartmentKPIId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.DepartmentKPIMetric", null)
                        .WithMany("DepartmentKPIMetricItemCollection")
                        .HasForeignKey("DepartmentKPIMetricId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.DepartmentLeader", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Employee", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.BusinessCommon.CommonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeKPIMetric", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeKPIMetricItem", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.EmployeeKPIMetric", null)
                        .WithMany("EmployeeKPIMetricItemCollection")
                        .HasForeignKey("EmployeeKPIMetricId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.PositionWorkKPI", "PositionWorkKPI")
                        .WithMany()
                        .HasForeignKey("PositionWorkKPIId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.EmployeeWithPositionWork", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", "PositionWork")
                        .WithMany()
                        .HasForeignKey("PositionWorkId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Organization", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.BusinessCommon.CommonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "OrganizationLeader")
                        .WithMany()
                        .HasForeignKey("OrganizationLeaderId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Employee", "OrganzationContact")
                        .WithMany()
                        .HasForeignKey("OrganzationContactId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.TransactionCenterRegister", "TransactionCenterRegister")
                        .WithMany()
                        .HasForeignKey("TransactionCenterRegisterId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcess", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcessActivity", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", "PositionWork")
                        .WithMany()
                        .HasForeignKey("PositionWorkId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcessWithWork", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.OrganizationBusinessProcess", "OrganizationBusinessProcess")
                        .WithMany()
                        .HasForeignKey("OrganizationBusinessProcessId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", "PositionWork")
                        .WithMany()
                        .HasForeignKey("PositionWorkId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.Position", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.PositionWorkKPI", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.OrganizationKPIType", "KPIType")
                        .WithMany()
                        .HasForeignKey("KPITypeId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("LPFW.EntitiyModels.OrganzationBusiness.PositionWork", null)
                        .WithMany("PositionWorkKPIs")
                        .HasForeignKey("PositionWorkId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.OrganzationBusiness.TransactionCenterRegister", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.BusinessCommon.CommonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.Article", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleComment", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "CommentWritor")
                        .WithMany()
                        .HasForeignKey("CommentWritorId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleComment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleCommentWithTag", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleCommentTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleInTopic", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleTopic", "ArticleTopic")
                        .WithMany()
                        .HasForeignKey("ArticleTopicId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleInType", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleRelevance", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "MasterArticle")
                        .WithMany()
                        .HasForeignKey("MasterArticleId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "RelevanceArticle")
                        .WithMany()
                        .HasForeignKey("RelevanceArticleId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleTopic", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.Attachments.BusinessImage", "TopicImage")
                        .WithMany()
                        .HasForeignKey("TopicImageId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleType", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.Attachments.BusinessImage", "ArticleTypeImage")
                        .WithMany()
                        .HasForeignKey("ArticleTypeImageId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleType", "ParentType")
                        .WithMany()
                        .HasForeignKey("ParentTypeId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.PortalSite.ArticleWithTag", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.PortalSite.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("LPFW.EntitiyModels.PortalSite.ArticleTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.Course", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "CourseAdministrator")
                        .WithMany()
                        .HasForeignKey("CourseAdministratorId");

                    b.HasOne("LPFW.EntitiyModels.TeachingBusiness.CourseContainer", "CourseContainer")
                        .WithMany()
                        .HasForeignKey("CourseContainerId");

                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseItem", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.TeachingBusiness.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("LPFW.EntitiyModels.TeachingBusiness.CourseItemContent", "CourseItemContent")
                        .WithMany()
                        .HasForeignKey("CourseItemContentId");

                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("LPFW.EntitiyModels.TeachingBusiness.CourseItem", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LPFW.EntitiyModels.TeachingBusiness.CourseItemContent", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationRole", b =>
                {
                    b.HasOne("LPFW.EntitiyModels.ApplicationCommon.RoleAndUser.ApplicationRole", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
